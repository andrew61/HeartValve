//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HeartValve.Shared.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HeartValveEntities : DbContext
    {
        public HeartValveEntities()
            : base("name=HeartValveEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int AddBloodGlucoseMeasurement(string userId, Nullable<int> glucoseLevel, Nullable<System.DateTime> readingDate)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var glucoseLevelParameter = glucoseLevel.HasValue ?
                new ObjectParameter("glucoseLevel", glucoseLevel) :
                new ObjectParameter("glucoseLevel", typeof(int));
    
            var readingDateParameter = readingDate.HasValue ?
                new ObjectParameter("readingDate", readingDate) :
                new ObjectParameter("readingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddBloodGlucoseMeasurement", userIdParameter, glucoseLevelParameter, readingDateParameter);
        }
    
        public virtual int AddBloodPressureMeasurement(string userId, Nullable<int> systolic, Nullable<int> diastolic, Nullable<int> map, Nullable<int> pulse, Nullable<System.DateTime> readingDate)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var systolicParameter = systolic.HasValue ?
                new ObjectParameter("systolic", systolic) :
                new ObjectParameter("systolic", typeof(int));
    
            var diastolicParameter = diastolic.HasValue ?
                new ObjectParameter("diastolic", diastolic) :
                new ObjectParameter("diastolic", typeof(int));
    
            var mapParameter = map.HasValue ?
                new ObjectParameter("map", map) :
                new ObjectParameter("map", typeof(int));
    
            var pulseParameter = pulse.HasValue ?
                new ObjectParameter("pulse", pulse) :
                new ObjectParameter("pulse", typeof(int));
    
            var readingDateParameter = readingDate.HasValue ?
                new ObjectParameter("readingDate", readingDate) :
                new ObjectParameter("readingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddBloodPressureMeasurement", userIdParameter, systolicParameter, diastolicParameter, mapParameter, pulseParameter, readingDateParameter);
        }
    
        public virtual int AddDeviceToken(string userId, Nullable<int> tokenTypeId, string token)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var tokenTypeIdParameter = tokenTypeId.HasValue ?
                new ObjectParameter("tokenTypeId", tokenTypeId) :
                new ObjectParameter("tokenTypeId", typeof(int));
    
            var tokenParameter = token != null ?
                new ObjectParameter("token", token) :
                new ObjectParameter("token", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDeviceToken", userIdParameter, tokenTypeIdParameter, tokenParameter);
        }
    
        public virtual int AddEquipmentAssignment(string userID, Nullable<int> inventoryID, string netID, string comments, ObjectParameter returnID, ObjectParameter name)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(string));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("inventoryID", inventoryID) :
                new ObjectParameter("inventoryID", typeof(int));
    
            var netIDParameter = netID != null ?
                new ObjectParameter("netID", netID) :
                new ObjectParameter("netID", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("comments", comments) :
                new ObjectParameter("comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEquipmentAssignment", userIDParameter, inventoryIDParameter, netIDParameter, commentsParameter, returnID, name);
        }
    
        public virtual int AddEquipmentItem(Nullable<int> equipTypeID, string manufacturer, string serialNo, string modelNo, string phoneNo, string macAddr, string bluetoothModelNo, Nullable<int> purchaserID, Nullable<int> cuffSize, Nullable<System.DateTime> acqDate, Nullable<bool> active, string createdBy, ObjectParameter return_id)
        {
            var equipTypeIDParameter = equipTypeID.HasValue ?
                new ObjectParameter("equipTypeID", equipTypeID) :
                new ObjectParameter("equipTypeID", typeof(int));
    
            var manufacturerParameter = manufacturer != null ?
                new ObjectParameter("manufacturer", manufacturer) :
                new ObjectParameter("manufacturer", typeof(string));
    
            var serialNoParameter = serialNo != null ?
                new ObjectParameter("serialNo", serialNo) :
                new ObjectParameter("serialNo", typeof(string));
    
            var modelNoParameter = modelNo != null ?
                new ObjectParameter("modelNo", modelNo) :
                new ObjectParameter("modelNo", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("phoneNo", phoneNo) :
                new ObjectParameter("phoneNo", typeof(string));
    
            var macAddrParameter = macAddr != null ?
                new ObjectParameter("macAddr", macAddr) :
                new ObjectParameter("macAddr", typeof(string));
    
            var bluetoothModelNoParameter = bluetoothModelNo != null ?
                new ObjectParameter("bluetoothModelNo", bluetoothModelNo) :
                new ObjectParameter("bluetoothModelNo", typeof(string));
    
            var purchaserIDParameter = purchaserID.HasValue ?
                new ObjectParameter("purchaserID", purchaserID) :
                new ObjectParameter("purchaserID", typeof(int));
    
            var cuffSizeParameter = cuffSize.HasValue ?
                new ObjectParameter("cuffSize", cuffSize) :
                new ObjectParameter("cuffSize", typeof(int));
    
            var acqDateParameter = acqDate.HasValue ?
                new ObjectParameter("acqDate", acqDate) :
                new ObjectParameter("acqDate", typeof(System.DateTime));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("active", active) :
                new ObjectParameter("active", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("createdBy", createdBy) :
                new ObjectParameter("createdBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEquipmentItem", equipTypeIDParameter, manufacturerParameter, serialNoParameter, modelNoParameter, phoneNoParameter, macAddrParameter, bluetoothModelNoParameter, purchaserIDParameter, cuffSizeParameter, acqDateParameter, activeParameter, createdByParameter, return_id);
        }
    
        public virtual int AddInventoryDevice(string userId, string deviceName, string deviceSerialNumber, Nullable<bool> deviceIsCleaned, string deviceType, Nullable<bool> deviceIsAvailable, Nullable<System.DateTime> checkInDate)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var deviceNameParameter = deviceName != null ?
                new ObjectParameter("DeviceName", deviceName) :
                new ObjectParameter("DeviceName", typeof(string));
    
            var deviceSerialNumberParameter = deviceSerialNumber != null ?
                new ObjectParameter("DeviceSerialNumber", deviceSerialNumber) :
                new ObjectParameter("DeviceSerialNumber", typeof(string));
    
            var deviceIsCleanedParameter = deviceIsCleaned.HasValue ?
                new ObjectParameter("DeviceIsCleaned", deviceIsCleaned) :
                new ObjectParameter("DeviceIsCleaned", typeof(bool));
    
            var deviceTypeParameter = deviceType != null ?
                new ObjectParameter("DeviceType", deviceType) :
                new ObjectParameter("DeviceType", typeof(string));
    
            var deviceIsAvailableParameter = deviceIsAvailable.HasValue ?
                new ObjectParameter("DeviceIsAvailable", deviceIsAvailable) :
                new ObjectParameter("DeviceIsAvailable", typeof(bool));
    
            var checkInDateParameter = checkInDate.HasValue ?
                new ObjectParameter("CheckInDate", checkInDate) :
                new ObjectParameter("CheckInDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddInventoryDevice", userIdParameter, deviceNameParameter, deviceSerialNumberParameter, deviceIsCleanedParameter, deviceTypeParameter, deviceIsAvailableParameter, checkInDateParameter);
        }
    
        public virtual int AddLoginInformation(string userName, Nullable<System.DateTime> time, string longitude, string latitude, string model, string os, string network, string phoneType, string appVersion)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var timeParameter = time.HasValue ?
                new ObjectParameter("time", time) :
                new ObjectParameter("time", typeof(System.DateTime));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("longitude", longitude) :
                new ObjectParameter("longitude", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("latitude", latitude) :
                new ObjectParameter("latitude", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("model", model) :
                new ObjectParameter("model", typeof(string));
    
            var osParameter = os != null ?
                new ObjectParameter("os", os) :
                new ObjectParameter("os", typeof(string));
    
            var networkParameter = network != null ?
                new ObjectParameter("network", network) :
                new ObjectParameter("network", typeof(string));
    
            var phoneTypeParameter = phoneType != null ?
                new ObjectParameter("phoneType", phoneType) :
                new ObjectParameter("phoneType", typeof(string));
    
            var appVersionParameter = appVersion != null ?
                new ObjectParameter("appVersion", appVersion) :
                new ObjectParameter("appVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddLoginInformation", userNameParameter, timeParameter, longitudeParameter, latitudeParameter, modelParameter, osParameter, networkParameter, phoneTypeParameter, appVersionParameter);
        }
    
        public virtual int AddMedicationActivityBatch(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddMedicationActivityBatch", userIdParameter);
        }
    
        public virtual int AddOxygenSaturation(string userId, Nullable<decimal> spO2, Nullable<int> heartRate, Nullable<System.DateTime> readingDate)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var spO2Parameter = spO2.HasValue ?
                new ObjectParameter("spO2", spO2) :
                new ObjectParameter("spO2", typeof(decimal));
    
            var heartRateParameter = heartRate.HasValue ?
                new ObjectParameter("heartRate", heartRate) :
                new ObjectParameter("heartRate", typeof(int));
    
            var readingDateParameter = readingDate.HasValue ?
                new ObjectParameter("readingDate", readingDate) :
                new ObjectParameter("readingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddOxygenSaturation", userIdParameter, spO2Parameter, heartRateParameter, readingDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> AddPillCap(string serialNumber)
        {
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("serialNumber", serialNumber) :
                new ObjectParameter("serialNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AddPillCap", serialNumberParameter);
        }
    
        public virtual int AddRequestCheck(string userId, string equipmentRequester, Nullable<System.DateTime> requestDate, Nullable<System.DateTime> deliveryDate, string deliveryLocation, Nullable<System.DateTime> enrollmentDate, string deliveredBy, Nullable<System.DateTime> deliveredDate, Nullable<bool> isDelivered, Nullable<int> bpCuffSizeId, string patientEmail)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var equipmentRequesterParameter = equipmentRequester != null ?
                new ObjectParameter("equipmentRequester", equipmentRequester) :
                new ObjectParameter("equipmentRequester", typeof(string));
    
            var requestDateParameter = requestDate.HasValue ?
                new ObjectParameter("requestDate", requestDate) :
                new ObjectParameter("requestDate", typeof(System.DateTime));
    
            var deliveryDateParameter = deliveryDate.HasValue ?
                new ObjectParameter("deliveryDate", deliveryDate) :
                new ObjectParameter("deliveryDate", typeof(System.DateTime));
    
            var deliveryLocationParameter = deliveryLocation != null ?
                new ObjectParameter("deliveryLocation", deliveryLocation) :
                new ObjectParameter("deliveryLocation", typeof(string));
    
            var enrollmentDateParameter = enrollmentDate.HasValue ?
                new ObjectParameter("enrollmentDate", enrollmentDate) :
                new ObjectParameter("enrollmentDate", typeof(System.DateTime));
    
            var deliveredByParameter = deliveredBy != null ?
                new ObjectParameter("deliveredBy", deliveredBy) :
                new ObjectParameter("deliveredBy", typeof(string));
    
            var deliveredDateParameter = deliveredDate.HasValue ?
                new ObjectParameter("deliveredDate", deliveredDate) :
                new ObjectParameter("deliveredDate", typeof(System.DateTime));
    
            var isDeliveredParameter = isDelivered.HasValue ?
                new ObjectParameter("isDelivered", isDelivered) :
                new ObjectParameter("isDelivered", typeof(bool));
    
            var bpCuffSizeIdParameter = bpCuffSizeId.HasValue ?
                new ObjectParameter("bpCuffSizeId", bpCuffSizeId) :
                new ObjectParameter("bpCuffSizeId", typeof(int));
    
            var patientEmailParameter = patientEmail != null ?
                new ObjectParameter("patientEmail", patientEmail) :
                new ObjectParameter("patientEmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddRequestCheck", userIdParameter, equipmentRequesterParameter, requestDateParameter, deliveryDateParameter, deliveryLocationParameter, enrollmentDateParameter, deliveredByParameter, deliveredDateParameter, isDeliveredParameter, bpCuffSizeIdParameter, patientEmailParameter);
        }
    
        public virtual int AddSurveyAnswers(Nullable<int> surveyId, string userId, Nullable<int> sessionId, Nullable<int> questionId)
        {
            var surveyIdParameter = surveyId.HasValue ?
                new ObjectParameter("surveyId", surveyId) :
                new ObjectParameter("surveyId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("sessionId", sessionId) :
                new ObjectParameter("sessionId", typeof(int));
    
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("questionId", questionId) :
                new ObjectParameter("questionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSurveyAnswers", surveyIdParameter, userIdParameter, sessionIdParameter, questionIdParameter);
        }
    
        public virtual ObjectResult<AddSurveySession_Result> AddSurveySession(Nullable<int> surveyId, string userId)
        {
            var surveyIdParameter = surveyId.HasValue ?
                new ObjectParameter("surveyId", surveyId) :
                new ObjectParameter("surveyId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddSurveySession_Result>("AddSurveySession", surveyIdParameter, userIdParameter);
        }
    
        public virtual int AddUpdateMedicationAlerts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateMedicationAlerts");
        }
    
        public virtual ObjectResult<Nullable<int>> AddUpdateMedicationRefill(Nullable<int> refillId, string userId, Nullable<int> userMedicationId, Nullable<System.DateTime> refillDate, Nullable<int> quantity)
        {
            var refillIdParameter = refillId.HasValue ?
                new ObjectParameter("refillId", refillId) :
                new ObjectParameter("refillId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var userMedicationIdParameter = userMedicationId.HasValue ?
                new ObjectParameter("userMedicationId", userMedicationId) :
                new ObjectParameter("userMedicationId", typeof(int));
    
            var refillDateParameter = refillDate.HasValue ?
                new ObjectParameter("refillDate", refillDate) :
                new ObjectParameter("refillDate", typeof(System.DateTime));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AddUpdateMedicationRefill", refillIdParameter, userIdParameter, userMedicationIdParameter, refillDateParameter, quantityParameter);
        }
    
        public virtual int AddUpdateMedicationSchedules(ObjectParameter groupId)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateMedicationSchedules", groupId);
        }
    
        public virtual ObjectResult<Nullable<int>> AddUpdatePillCapInstance(Nullable<int> pillCapInstanceId, string userId, Nullable<int> pillCapId, string pillCapName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var pillCapInstanceIdParameter = pillCapInstanceId.HasValue ?
                new ObjectParameter("pillCapInstanceId", pillCapInstanceId) :
                new ObjectParameter("pillCapInstanceId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var pillCapIdParameter = pillCapId.HasValue ?
                new ObjectParameter("pillCapId", pillCapId) :
                new ObjectParameter("pillCapId", typeof(int));
    
            var pillCapNameParameter = pillCapName != null ?
                new ObjectParameter("pillCapName", pillCapName) :
                new ObjectParameter("pillCapName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AddUpdatePillCapInstance", pillCapInstanceIdParameter, userIdParameter, pillCapIdParameter, pillCapNameParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int AddUpdateRequestCheck(Nullable<int> id, Nullable<System.DateTime> deliveryDate, Nullable<System.DateTime> enrollmentDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var deliveryDateParameter = deliveryDate.HasValue ?
                new ObjectParameter("deliveryDate", deliveryDate) :
                new ObjectParameter("deliveryDate", typeof(System.DateTime));
    
            var enrollmentDateParameter = enrollmentDate.HasValue ?
                new ObjectParameter("enrollmentDate", enrollmentDate) :
                new ObjectParameter("enrollmentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateRequestCheck", idParameter, deliveryDateParameter, enrollmentDateParameter);
        }
    
        public virtual int AddUpdateRequestCheckDeliveryStatus(Nullable<int> id, string userId, Nullable<System.DateTime> deliveredDate, Nullable<bool> isDelivered)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var deliveredDateParameter = deliveredDate.HasValue ?
                new ObjectParameter("deliveredDate", deliveredDate) :
                new ObjectParameter("deliveredDate", typeof(System.DateTime));
    
            var isDeliveredParameter = isDelivered.HasValue ?
                new ObjectParameter("isDelivered", isDelivered) :
                new ObjectParameter("isDelivered", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateRequestCheckDeliveryStatus", idParameter, userIdParameter, deliveredDateParameter, isDeliveredParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> AddUpdateSurvey(Nullable<int> surveyId, string name, string description)
        {
            var surveyIdParameter = surveyId.HasValue ?
                new ObjectParameter("surveyId", surveyId) :
                new ObjectParameter("surveyId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AddUpdateSurvey", surveyIdParameter, nameParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> AddUpdateSurveyLogic(Nullable<int> logicId, Nullable<int> surveyId, string expression, Nullable<int> actionId)
        {
            var logicIdParameter = logicId.HasValue ?
                new ObjectParameter("logicId", logicId) :
                new ObjectParameter("logicId", typeof(int));
    
            var surveyIdParameter = surveyId.HasValue ?
                new ObjectParameter("surveyId", surveyId) :
                new ObjectParameter("surveyId", typeof(int));
    
            var expressionParameter = expression != null ?
                new ObjectParameter("expression", expression) :
                new ObjectParameter("expression", typeof(string));
    
            var actionIdParameter = actionId.HasValue ?
                new ObjectParameter("actionId", actionId) :
                new ObjectParameter("actionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AddUpdateSurveyLogic", logicIdParameter, surveyIdParameter, expressionParameter, actionIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> AddUpdateSurveyQuestion(Nullable<int> questionId, Nullable<int> surveyId, Nullable<int> questionTypeId, string name, string questionText, string imagePath, Nullable<bool> required)
        {
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("questionId", questionId) :
                new ObjectParameter("questionId", typeof(int));
    
            var surveyIdParameter = surveyId.HasValue ?
                new ObjectParameter("surveyId", surveyId) :
                new ObjectParameter("surveyId", typeof(int));
    
            var questionTypeIdParameter = questionTypeId.HasValue ?
                new ObjectParameter("questionTypeId", questionTypeId) :
                new ObjectParameter("questionTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var questionTextParameter = questionText != null ?
                new ObjectParameter("questionText", questionText) :
                new ObjectParameter("questionText", typeof(string));
    
            var imagePathParameter = imagePath != null ?
                new ObjectParameter("imagePath", imagePath) :
                new ObjectParameter("imagePath", typeof(string));
    
            var requiredParameter = required.HasValue ?
                new ObjectParameter("required", required) :
                new ObjectParameter("required", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AddUpdateSurveyQuestion", questionIdParameter, surveyIdParameter, questionTypeIdParameter, nameParameter, questionTextParameter, imagePathParameter, requiredParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> AddUpdateSurveyQuestionCategory(Nullable<int> categoryId, Nullable<int> questionId, string name)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(int));
    
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("questionId", questionId) :
                new ObjectParameter("questionId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AddUpdateSurveyQuestionCategory", categoryIdParameter, questionIdParameter, nameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> AddUpdateSurveyQuestionLogic(Nullable<int> logicId, Nullable<int> questionId, string expression, Nullable<int> actionId, Nullable<int> actionQuestionId)
        {
            var logicIdParameter = logicId.HasValue ?
                new ObjectParameter("logicId", logicId) :
                new ObjectParameter("logicId", typeof(int));
    
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("questionId", questionId) :
                new ObjectParameter("questionId", typeof(int));
    
            var expressionParameter = expression != null ?
                new ObjectParameter("expression", expression) :
                new ObjectParameter("expression", typeof(string));
    
            var actionIdParameter = actionId.HasValue ?
                new ObjectParameter("actionId", actionId) :
                new ObjectParameter("actionId", typeof(int));
    
            var actionQuestionIdParameter = actionQuestionId.HasValue ?
                new ObjectParameter("actionQuestionId", actionQuestionId) :
                new ObjectParameter("actionQuestionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AddUpdateSurveyQuestionLogic", logicIdParameter, questionIdParameter, expressionParameter, actionIdParameter, actionQuestionIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> AddUpdateSurveyQuestionOption(Nullable<int> optionId, Nullable<int> questionId, Nullable<int> categoryId, string optionText, Nullable<int> optionValue, Nullable<int> shapeType, string coordinates, string imagePath)
        {
            var optionIdParameter = optionId.HasValue ?
                new ObjectParameter("optionId", optionId) :
                new ObjectParameter("optionId", typeof(int));
    
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("questionId", questionId) :
                new ObjectParameter("questionId", typeof(int));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(int));
    
            var optionTextParameter = optionText != null ?
                new ObjectParameter("optionText", optionText) :
                new ObjectParameter("optionText", typeof(string));
    
            var optionValueParameter = optionValue.HasValue ?
                new ObjectParameter("optionValue", optionValue) :
                new ObjectParameter("optionValue", typeof(int));
    
            var shapeTypeParameter = shapeType.HasValue ?
                new ObjectParameter("shapeType", shapeType) :
                new ObjectParameter("shapeType", typeof(int));
    
            var coordinatesParameter = coordinates != null ?
                new ObjectParameter("coordinates", coordinates) :
                new ObjectParameter("coordinates", typeof(string));
    
            var imagePathParameter = imagePath != null ?
                new ObjectParameter("imagePath", imagePath) :
                new ObjectParameter("imagePath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AddUpdateSurveyQuestionOption", optionIdParameter, questionIdParameter, categoryIdParameter, optionTextParameter, optionValueParameter, shapeTypeParameter, coordinatesParameter, imagePathParameter);
        }
    
        public virtual ObjectResult<string> AddUpdateUser(string userId, string firstName, string lastName, string phoneNumber, Nullable<System.DateTime> enrollmentDate, Nullable<int> systolicMinThreshold, Nullable<int> systolicMaxThreshold, Nullable<int> diastolicMinThreshold, Nullable<int> diastolicMaxThreshold, Nullable<int> heartRateMinThreshold, Nullable<int> heartRateMaxThreshold, Nullable<decimal> oxygenSaturationMinThreshold, Nullable<decimal> oxygenSaturationMaxThreshold, Nullable<decimal> weightMinThreshold, Nullable<decimal> weightMaxThreshold, Nullable<int> mrn, Nullable<bool> isActive, Nullable<System.DateTime> deliveryDate, Nullable<int> bpCuffSizeId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("phoneNumber", phoneNumber) :
                new ObjectParameter("phoneNumber", typeof(string));
    
            var enrollmentDateParameter = enrollmentDate.HasValue ?
                new ObjectParameter("enrollmentDate", enrollmentDate) :
                new ObjectParameter("enrollmentDate", typeof(System.DateTime));
    
            var systolicMinThresholdParameter = systolicMinThreshold.HasValue ?
                new ObjectParameter("systolicMinThreshold", systolicMinThreshold) :
                new ObjectParameter("systolicMinThreshold", typeof(int));
    
            var systolicMaxThresholdParameter = systolicMaxThreshold.HasValue ?
                new ObjectParameter("systolicMaxThreshold", systolicMaxThreshold) :
                new ObjectParameter("systolicMaxThreshold", typeof(int));
    
            var diastolicMinThresholdParameter = diastolicMinThreshold.HasValue ?
                new ObjectParameter("diastolicMinThreshold", diastolicMinThreshold) :
                new ObjectParameter("diastolicMinThreshold", typeof(int));
    
            var diastolicMaxThresholdParameter = diastolicMaxThreshold.HasValue ?
                new ObjectParameter("diastolicMaxThreshold", diastolicMaxThreshold) :
                new ObjectParameter("diastolicMaxThreshold", typeof(int));
    
            var heartRateMinThresholdParameter = heartRateMinThreshold.HasValue ?
                new ObjectParameter("heartRateMinThreshold", heartRateMinThreshold) :
                new ObjectParameter("heartRateMinThreshold", typeof(int));
    
            var heartRateMaxThresholdParameter = heartRateMaxThreshold.HasValue ?
                new ObjectParameter("heartRateMaxThreshold", heartRateMaxThreshold) :
                new ObjectParameter("heartRateMaxThreshold", typeof(int));
    
            var oxygenSaturationMinThresholdParameter = oxygenSaturationMinThreshold.HasValue ?
                new ObjectParameter("oxygenSaturationMinThreshold", oxygenSaturationMinThreshold) :
                new ObjectParameter("oxygenSaturationMinThreshold", typeof(decimal));
    
            var oxygenSaturationMaxThresholdParameter = oxygenSaturationMaxThreshold.HasValue ?
                new ObjectParameter("oxygenSaturationMaxThreshold", oxygenSaturationMaxThreshold) :
                new ObjectParameter("oxygenSaturationMaxThreshold", typeof(decimal));
    
            var weightMinThresholdParameter = weightMinThreshold.HasValue ?
                new ObjectParameter("weightMinThreshold", weightMinThreshold) :
                new ObjectParameter("weightMinThreshold", typeof(decimal));
    
            var weightMaxThresholdParameter = weightMaxThreshold.HasValue ?
                new ObjectParameter("weightMaxThreshold", weightMaxThreshold) :
                new ObjectParameter("weightMaxThreshold", typeof(decimal));
    
            var mrnParameter = mrn.HasValue ?
                new ObjectParameter("mrn", mrn) :
                new ObjectParameter("mrn", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var deliveryDateParameter = deliveryDate.HasValue ?
                new ObjectParameter("deliveryDate", deliveryDate) :
                new ObjectParameter("deliveryDate", typeof(System.DateTime));
    
            var bpCuffSizeIdParameter = bpCuffSizeId.HasValue ?
                new ObjectParameter("bpCuffSizeId", bpCuffSizeId) :
                new ObjectParameter("bpCuffSizeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("AddUpdateUser", userIdParameter, firstNameParameter, lastNameParameter, phoneNumberParameter, enrollmentDateParameter, systolicMinThresholdParameter, systolicMaxThresholdParameter, diastolicMinThresholdParameter, diastolicMaxThresholdParameter, heartRateMinThresholdParameter, heartRateMaxThresholdParameter, oxygenSaturationMinThresholdParameter, oxygenSaturationMaxThresholdParameter, weightMinThresholdParameter, weightMaxThresholdParameter, mrnParameter, isActiveParameter, deliveryDateParameter, bpCuffSizeIdParameter);
        }
    
        public virtual ObjectResult<string> AddUpdateUserAdmin(string userId, string firstName, string lastName, string phoneNumber, Nullable<System.DateTime> enrollmentDate, Nullable<int> systolicMinThreshold, Nullable<int> systolicMaxThreshold, Nullable<int> diastolicMinThreshold, Nullable<int> diastolicMaxThreshold, Nullable<int> heartRateMinThreshold, Nullable<int> heartRateMaxThreshold, Nullable<decimal> oxygenSaturationMinThreshold, Nullable<decimal> oxygenSaturationMaxThreshold, Nullable<decimal> weightMinThreshold, Nullable<decimal> weightMaxThreshold, Nullable<int> mrn, Nullable<bool> isActive, Nullable<System.DateTime> deliveryDate, Nullable<int> bpCuffSizeId, Nullable<bool> isInStudy)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("phoneNumber", phoneNumber) :
                new ObjectParameter("phoneNumber", typeof(string));
    
            var enrollmentDateParameter = enrollmentDate.HasValue ?
                new ObjectParameter("enrollmentDate", enrollmentDate) :
                new ObjectParameter("enrollmentDate", typeof(System.DateTime));
    
            var systolicMinThresholdParameter = systolicMinThreshold.HasValue ?
                new ObjectParameter("systolicMinThreshold", systolicMinThreshold) :
                new ObjectParameter("systolicMinThreshold", typeof(int));
    
            var systolicMaxThresholdParameter = systolicMaxThreshold.HasValue ?
                new ObjectParameter("systolicMaxThreshold", systolicMaxThreshold) :
                new ObjectParameter("systolicMaxThreshold", typeof(int));
    
            var diastolicMinThresholdParameter = diastolicMinThreshold.HasValue ?
                new ObjectParameter("diastolicMinThreshold", diastolicMinThreshold) :
                new ObjectParameter("diastolicMinThreshold", typeof(int));
    
            var diastolicMaxThresholdParameter = diastolicMaxThreshold.HasValue ?
                new ObjectParameter("diastolicMaxThreshold", diastolicMaxThreshold) :
                new ObjectParameter("diastolicMaxThreshold", typeof(int));
    
            var heartRateMinThresholdParameter = heartRateMinThreshold.HasValue ?
                new ObjectParameter("heartRateMinThreshold", heartRateMinThreshold) :
                new ObjectParameter("heartRateMinThreshold", typeof(int));
    
            var heartRateMaxThresholdParameter = heartRateMaxThreshold.HasValue ?
                new ObjectParameter("heartRateMaxThreshold", heartRateMaxThreshold) :
                new ObjectParameter("heartRateMaxThreshold", typeof(int));
    
            var oxygenSaturationMinThresholdParameter = oxygenSaturationMinThreshold.HasValue ?
                new ObjectParameter("oxygenSaturationMinThreshold", oxygenSaturationMinThreshold) :
                new ObjectParameter("oxygenSaturationMinThreshold", typeof(decimal));
    
            var oxygenSaturationMaxThresholdParameter = oxygenSaturationMaxThreshold.HasValue ?
                new ObjectParameter("oxygenSaturationMaxThreshold", oxygenSaturationMaxThreshold) :
                new ObjectParameter("oxygenSaturationMaxThreshold", typeof(decimal));
    
            var weightMinThresholdParameter = weightMinThreshold.HasValue ?
                new ObjectParameter("weightMinThreshold", weightMinThreshold) :
                new ObjectParameter("weightMinThreshold", typeof(decimal));
    
            var weightMaxThresholdParameter = weightMaxThreshold.HasValue ?
                new ObjectParameter("weightMaxThreshold", weightMaxThreshold) :
                new ObjectParameter("weightMaxThreshold", typeof(decimal));
    
            var mrnParameter = mrn.HasValue ?
                new ObjectParameter("mrn", mrn) :
                new ObjectParameter("mrn", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var deliveryDateParameter = deliveryDate.HasValue ?
                new ObjectParameter("deliveryDate", deliveryDate) :
                new ObjectParameter("deliveryDate", typeof(System.DateTime));
    
            var bpCuffSizeIdParameter = bpCuffSizeId.HasValue ?
                new ObjectParameter("bpCuffSizeId", bpCuffSizeId) :
                new ObjectParameter("bpCuffSizeId", typeof(int));
    
            var isInStudyParameter = isInStudy.HasValue ?
                new ObjectParameter("IsInStudy", isInStudy) :
                new ObjectParameter("IsInStudy", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("AddUpdateUserAdmin", userIdParameter, firstNameParameter, lastNameParameter, phoneNumberParameter, enrollmentDateParameter, systolicMinThresholdParameter, systolicMaxThresholdParameter, diastolicMinThresholdParameter, diastolicMaxThresholdParameter, heartRateMinThresholdParameter, heartRateMaxThresholdParameter, oxygenSaturationMinThresholdParameter, oxygenSaturationMaxThresholdParameter, weightMinThresholdParameter, weightMaxThresholdParameter, mrnParameter, isActiveParameter, deliveryDateParameter, bpCuffSizeIdParameter, isInStudyParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> AddUpdateUserMedication(Nullable<int> userMedicationId, string userId, Nullable<int> medicationId, Nullable<decimal> quantity, string strength, string unit, string dosageForm, string route, string dose, Nullable<int> frequency, Nullable<int> pillCapId, Nullable<int> medicationScheduleTypeId, string indication, string instructions)
        {
            var userMedicationIdParameter = userMedicationId.HasValue ?
                new ObjectParameter("userMedicationId", userMedicationId) :
                new ObjectParameter("userMedicationId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var medicationIdParameter = medicationId.HasValue ?
                new ObjectParameter("medicationId", medicationId) :
                new ObjectParameter("medicationId", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(decimal));
    
            var strengthParameter = strength != null ?
                new ObjectParameter("strength", strength) :
                new ObjectParameter("strength", typeof(string));
    
            var unitParameter = unit != null ?
                new ObjectParameter("unit", unit) :
                new ObjectParameter("unit", typeof(string));
    
            var dosageFormParameter = dosageForm != null ?
                new ObjectParameter("dosageForm", dosageForm) :
                new ObjectParameter("dosageForm", typeof(string));
    
            var routeParameter = route != null ?
                new ObjectParameter("route", route) :
                new ObjectParameter("route", typeof(string));
    
            var doseParameter = dose != null ?
                new ObjectParameter("dose", dose) :
                new ObjectParameter("dose", typeof(string));
    
            var frequencyParameter = frequency.HasValue ?
                new ObjectParameter("frequency", frequency) :
                new ObjectParameter("frequency", typeof(int));
    
            var pillCapIdParameter = pillCapId.HasValue ?
                new ObjectParameter("pillCapId", pillCapId) :
                new ObjectParameter("pillCapId", typeof(int));
    
            var medicationScheduleTypeIdParameter = medicationScheduleTypeId.HasValue ?
                new ObjectParameter("medicationScheduleTypeId", medicationScheduleTypeId) :
                new ObjectParameter("medicationScheduleTypeId", typeof(int));
    
            var indicationParameter = indication != null ?
                new ObjectParameter("indication", indication) :
                new ObjectParameter("indication", typeof(string));
    
            var instructionsParameter = instructions != null ?
                new ObjectParameter("instructions", instructions) :
                new ObjectParameter("instructions", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AddUpdateUserMedication", userMedicationIdParameter, userIdParameter, medicationIdParameter, quantityParameter, strengthParameter, unitParameter, dosageFormParameter, routeParameter, doseParameter, frequencyParameter, pillCapIdParameter, medicationScheduleTypeIdParameter, indicationParameter, instructionsParameter);
        }
    
        public virtual int AddWeightMeasurement(string userId, Nullable<decimal> weight, Nullable<System.DateTime> readingDate)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("weight", weight) :
                new ObjectParameter("weight", typeof(decimal));
    
            var readingDateParameter = readingDate.HasValue ?
                new ObjectParameter("readingDate", readingDate) :
                new ObjectParameter("readingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddWeightMeasurement", userIdParameter, weightParameter, readingDateParameter);
        }
    
        public virtual int ChangeSurveyQuestionCategoryOrder(Nullable<int> categoryId, Nullable<int> order)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(int));
    
            var orderParameter = order.HasValue ?
                new ObjectParameter("order", order) :
                new ObjectParameter("order", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeSurveyQuestionCategoryOrder", categoryIdParameter, orderParameter);
        }
    
        public virtual int ChangeSurveyQuestionOptionOrder(Nullable<int> optionId, Nullable<int> order)
        {
            var optionIdParameter = optionId.HasValue ?
                new ObjectParameter("optionId", optionId) :
                new ObjectParameter("optionId", typeof(int));
    
            var orderParameter = order.HasValue ?
                new ObjectParameter("order", order) :
                new ObjectParameter("order", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeSurveyQuestionOptionOrder", optionIdParameter, orderParameter);
        }
    
        public virtual int ChangeSurveyQuestionOrder(Nullable<int> questionId, Nullable<int> order)
        {
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("questionId", questionId) :
                new ObjectParameter("questionId", typeof(int));
    
            var orderParameter = order.HasValue ?
                new ObjectParameter("order", order) :
                new ObjectParameter("order", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeSurveyQuestionOrder", questionIdParameter, orderParameter);
        }
    
        public virtual int CompleteSurveySession(Nullable<int> sessionId)
        {
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("sessionId", sessionId) :
                new ObjectParameter("sessionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CompleteSurveySession", sessionIdParameter);
        }
    
        public virtual int DeleteMedicationSchedules()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMedicationSchedules");
        }
    
        public virtual int DeleteSurvey(Nullable<int> surveyId)
        {
            var surveyIdParameter = surveyId.HasValue ?
                new ObjectParameter("surveyId", surveyId) :
                new ObjectParameter("surveyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSurvey", surveyIdParameter);
        }
    
        public virtual int DeleteSurveyLogic(Nullable<int> logicId)
        {
            var logicIdParameter = logicId.HasValue ?
                new ObjectParameter("logicId", logicId) :
                new ObjectParameter("logicId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSurveyLogic", logicIdParameter);
        }
    
        public virtual int DeleteSurveyQuestion(Nullable<int> questionId)
        {
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("questionId", questionId) :
                new ObjectParameter("questionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSurveyQuestion", questionIdParameter);
        }
    
        public virtual int DeleteSurveyQuestionLogic(Nullable<int> logicId)
        {
            var logicIdParameter = logicId.HasValue ?
                new ObjectParameter("logicId", logicId) :
                new ObjectParameter("logicId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSurveyQuestionLogic", logicIdParameter);
        }
    
        public virtual int DeleteSurveyQuestionOption(Nullable<int> optionId)
        {
            var optionIdParameter = optionId.HasValue ?
                new ObjectParameter("optionId", optionId) :
                new ObjectParameter("optionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSurveyQuestionOption", optionIdParameter);
        }
    
        public virtual int DeleteUserMedication(Nullable<int> userMedicationId)
        {
            var userMedicationIdParameter = userMedicationId.HasValue ?
                new ObjectParameter("userMedicationId", userMedicationId) :
                new ObjectParameter("userMedicationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUserMedication", userMedicationIdParameter);
        }
    
        [DbFunction("HeartValveEntities", "fnGetScheduleDates")]
        public virtual IQueryable<Nullable<System.DateTime>> fnGetScheduleDates(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<byte> dayOfWeek, Nullable<System.TimeSpan> scheduleTime)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var dayOfWeekParameter = dayOfWeek.HasValue ?
                new ObjectParameter("dayOfWeek", dayOfWeek) :
                new ObjectParameter("dayOfWeek", typeof(byte));
    
            var scheduleTimeParameter = scheduleTime.HasValue ?
                new ObjectParameter("scheduleTime", scheduleTime) :
                new ObjectParameter("scheduleTime", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<System.DateTime>>("[HeartValveEntities].[fnGetScheduleDates](@startDate, @endDate, @dayOfWeek, @scheduleTime)", startDateParameter, endDateParameter, dayOfWeekParameter, scheduleTimeParameter);
        }
    
        [DbFunction("HeartValveEntities", "fnGetUserMedicationScheduleDates")]
        public virtual IQueryable<fnGetUserMedicationScheduleDates_Result> fnGetUserMedicationScheduleDates(string userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetUserMedicationScheduleDates_Result>("[HeartValveEntities].[fnGetUserMedicationScheduleDates](@userId, @startDate, @endDate)", userIdParameter, startDateParameter, endDateParameter);
        }
    
        [DbFunction("HeartValveEntities", "fnGetUserMedicationsNotTaken")]
        public virtual IQueryable<fnGetUserMedicationsNotTaken_Result> fnGetUserMedicationsNotTaken(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetUserMedicationsNotTaken_Result>("[HeartValveEntities].[fnGetUserMedicationsNotTaken](@userId)", userIdParameter);
        }
    
        public virtual ObjectResult<GetAllUsers_Result> GetAllUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllUsers_Result>("GetAllUsers");
        }
    
        public virtual ObjectResult<GetAppVersion_Result> GetAppVersion()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAppVersion_Result>("GetAppVersion");
        }
    
        public virtual ObjectResult<GetArchivedUsers_Result> GetArchivedUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetArchivedUsers_Result>("GetArchivedUsers");
        }
    
        public virtual ObjectResult<GetBloodGlucoseMeasurements_Result> GetBloodGlucoseMeasurements(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBloodGlucoseMeasurements_Result>("GetBloodGlucoseMeasurements", userIdParameter);
        }
    
        public virtual ObjectResult<GetBloodPressureAverages_Result> GetBloodPressureAverages(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBloodPressureAverages_Result>("GetBloodPressureAverages", dateParameter);
        }
    
        public virtual ObjectResult<GetBloodPressureMeasurements_Result> GetBloodPressureMeasurements(string userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBloodPressureMeasurements_Result>("GetBloodPressureMeasurements", userIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetBPMCuffSizeLU_Result> GetBPMCuffSizeLU()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBPMCuffSizeLU_Result>("GetBPMCuffSizeLU");
        }
    
        public virtual ObjectResult<GetBPMeasurementsChart_Result> GetBPMeasurementsChart(string userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBPMeasurementsChart_Result>("GetBPMeasurementsChart", userIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetCurrentSurveySession_Result> GetCurrentSurveySession(Nullable<int> surveyId, string userId)
        {
            var surveyIdParameter = surveyId.HasValue ?
                new ObjectParameter("surveyId", surveyId) :
                new ObjectParameter("surveyId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCurrentSurveySession_Result>("GetCurrentSurveySession", surveyIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<GetDailyAssessmentReport_Result> GetDailyAssessmentReport(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDailyAssessmentReport_Result>("GetDailyAssessmentReport", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetDailyAssessmentsNotTaken_Result> GetDailyAssessmentsNotTaken()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDailyAssessmentsNotTaken_Result>("GetDailyAssessmentsNotTaken");
        }
    
        public virtual ObjectResult<GetDeviceTokens_Result> GetDeviceTokens(string userId, Nullable<int> tokenTypeId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var tokenTypeIdParameter = tokenTypeId.HasValue ?
                new ObjectParameter("tokenTypeId", tokenTypeId) :
                new ObjectParameter("tokenTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDeviceTokens_Result>("GetDeviceTokens", userIdParameter, tokenTypeIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetEmailIncrement()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetEmailIncrement");
        }
    
        public virtual ObjectResult<GetEquipmentAssignments_Result> GetEquipmentAssignments()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEquipmentAssignments_Result>("GetEquipmentAssignments");
        }
    
        public virtual ObjectResult<GetEquipmentItem_Result> GetEquipmentItem(Nullable<int> inventoryID)
        {
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("inventoryID", inventoryID) :
                new ObjectParameter("inventoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEquipmentItem_Result>("GetEquipmentItem", inventoryIDParameter);
        }
    
        public virtual ObjectResult<GetEquipmentItems_Result> GetEquipmentItems()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEquipmentItems_Result>("GetEquipmentItems");
        }
    
        public virtual ObjectResult<GetEquipReturnReasonsLU_Result> GetEquipReturnReasonsLU()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEquipReturnReasonsLU_Result>("GetEquipReturnReasonsLU");
        }
    
        public virtual ObjectResult<GetEquipTypeLU_Result> GetEquipTypeLU()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEquipTypeLU_Result>("GetEquipTypeLU");
        }
    
        public virtual ObjectResult<GetEveryUsers_Result> GetEveryUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEveryUsers_Result>("GetEveryUsers");
        }
    
        public virtual ObjectResult<GetEveryUsersAdmin_Result> GetEveryUsersAdmin()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEveryUsersAdmin_Result>("GetEveryUsersAdmin");
        }
    
        public virtual ObjectResult<GetMedicationAdherence_Result> GetMedicationAdherence(string userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMedicationAdherence_Result>("GetMedicationAdherence", userIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetMedicationAdherenceScore(string userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetMedicationAdherenceScore", userIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetMedicationAlerts_Result> GetMedicationAlerts(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMedicationAlerts_Result>("GetMedicationAlerts", userIdParameter);
        }
    
        public virtual ObjectResult<GetMedicationAlertsByGroupId_Result> GetMedicationAlertsByGroupId(Nullable<int> groupId)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("groupId", groupId) :
                new ObjectParameter("groupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMedicationAlertsByGroupId_Result>("GetMedicationAlertsByGroupId", groupIdParameter);
        }
    
        public virtual ObjectResult<GetMedicationAlertTypes_Result> GetMedicationAlertTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMedicationAlertTypes_Result>("GetMedicationAlertTypes");
        }
    
        public virtual ObjectResult<GetMedicationDosageForms_Result> GetMedicationDosageForms()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMedicationDosageForms_Result>("GetMedicationDosageForms");
        }
    
        public virtual ObjectResult<GetMedicationReminders_Result> GetMedicationReminders()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMedicationReminders_Result>("GetMedicationReminders");
        }
    
        public virtual ObjectResult<GetMedicationRoutes_Result> GetMedicationRoutes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMedicationRoutes_Result>("GetMedicationRoutes");
        }
    
        public virtual ObjectResult<GetMedications_Result> GetMedications()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMedications_Result>("GetMedications");
        }
    
        public virtual ObjectResult<GetMedicationSchedules_Result> GetMedicationSchedules(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMedicationSchedules_Result>("GetMedicationSchedules", userIdParameter);
        }
    
        public virtual ObjectResult<GetMedicationScheduleSummary_Result> GetMedicationScheduleSummary(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMedicationScheduleSummary_Result>("GetMedicationScheduleSummary", userIdParameter);
        }
    
        public virtual ObjectResult<GetMedicationScheduleTemplate_Result> GetMedicationScheduleTemplate(Nullable<int> templateId)
        {
            var templateIdParameter = templateId.HasValue ?
                new ObjectParameter("templateId", templateId) :
                new ObjectParameter("templateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMedicationScheduleTemplate_Result>("GetMedicationScheduleTemplate", templateIdParameter);
        }
    
        public virtual ObjectResult<GetMedicationScheduleTemplates_Result> GetMedicationScheduleTemplates(Nullable<int> frequency)
        {
            var frequencyParameter = frequency.HasValue ?
                new ObjectParameter("frequency", frequency) :
                new ObjectParameter("frequency", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMedicationScheduleTemplates_Result>("GetMedicationScheduleTemplates", frequencyParameter);
        }
    
        public virtual ObjectResult<GetMedicationScheduleTypes_Result> GetMedicationScheduleTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMedicationScheduleTypes_Result>("GetMedicationScheduleTypes");
        }
    
        public virtual ObjectResult<GetMedicationUnits_Result> GetMedicationUnits()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMedicationUnits_Result>("GetMedicationUnits");
        }
    
        public virtual int GetNextSequenceId(ObjectParameter id)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetNextSequenceId", id);
        }
    
        public virtual ObjectResult<GetOxygenSaturation_Result> GetOxygenSaturation(string userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOxygenSaturation_Result>("GetOxygenSaturation", userIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetOxygenSaturationAverages_Result> GetOxygenSaturationAverages(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOxygenSaturationAverages_Result>("GetOxygenSaturationAverages", dateParameter);
        }
    
        public virtual ObjectResult<GetOxygenSaturationChart_Result> GetOxygenSaturationChart(string userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOxygenSaturationChart_Result>("GetOxygenSaturationChart", userIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetPeopleReachedByYear_Result> GetPeopleReachedByYear()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPeopleReachedByYear_Result>("GetPeopleReachedByYear");
        }
    
        public virtual ObjectResult<GetPillCapInstances_Result> GetPillCapInstances(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPillCapInstances_Result>("GetPillCapInstances", userIdParameter);
        }
    
        public virtual ObjectResult<GetPurchasersLU_Result> GetPurchasersLU()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPurchasersLU_Result>("GetPurchasersLU");
        }
    
        public virtual ObjectResult<GetRequestCheck_Result> GetRequestCheck()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRequestCheck_Result>("GetRequestCheck");
        }
    
        public virtual ObjectResult<GetSurvey_Result> GetSurvey(Nullable<int> surveyId)
        {
            var surveyIdParameter = surveyId.HasValue ?
                new ObjectParameter("surveyId", surveyId) :
                new ObjectParameter("surveyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSurvey_Result>("GetSurvey", surveyIdParameter);
        }
    
        public virtual ObjectResult<GetSurveyAnswers_Result> GetSurveyAnswers(Nullable<int> surveyId, string userId, Nullable<int> sessionId, Nullable<int> questionId, Nullable<int> categoryId)
        {
            var surveyIdParameter = surveyId.HasValue ?
                new ObjectParameter("surveyId", surveyId) :
                new ObjectParameter("surveyId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("sessionId", sessionId) :
                new ObjectParameter("sessionId", typeof(int));
    
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("questionId", questionId) :
                new ObjectParameter("questionId", typeof(int));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSurveyAnswers_Result>("GetSurveyAnswers", surveyIdParameter, userIdParameter, sessionIdParameter, questionIdParameter, categoryIdParameter);
        }
    
        public virtual ObjectResult<GetSurveyLogic_Result> GetSurveyLogic(Nullable<int> surveyId)
        {
            var surveyIdParameter = surveyId.HasValue ?
                new ObjectParameter("surveyId", surveyId) :
                new ObjectParameter("surveyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSurveyLogic_Result>("GetSurveyLogic", surveyIdParameter);
        }
    
        public virtual ObjectResult<GetSurveyLogicActions_Result> GetSurveyLogicActions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSurveyLogicActions_Result>("GetSurveyLogicActions");
        }
    
        public virtual ObjectResult<GetSurveyQuestion_Result> GetSurveyQuestion(Nullable<int> questionId)
        {
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("questionId", questionId) :
                new ObjectParameter("questionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSurveyQuestion_Result>("GetSurveyQuestion", questionIdParameter);
        }
    
        public virtual ObjectResult<GetSurveyQuestionCategories_Result> GetSurveyQuestionCategories(Nullable<int> questionId)
        {
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("questionId", questionId) :
                new ObjectParameter("questionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSurveyQuestionCategories_Result>("GetSurveyQuestionCategories", questionIdParameter);
        }
    
        public virtual ObjectResult<GetSurveyQuestionLogic_Result> GetSurveyQuestionLogic(Nullable<int> questionId)
        {
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("questionId", questionId) :
                new ObjectParameter("questionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSurveyQuestionLogic_Result>("GetSurveyQuestionLogic", questionIdParameter);
        }
    
        public virtual ObjectResult<GetSurveyQuestionLogicActions_Result> GetSurveyQuestionLogicActions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSurveyQuestionLogicActions_Result>("GetSurveyQuestionLogicActions");
        }
    
        public virtual ObjectResult<GetSurveyQuestionOptions_Result> GetSurveyQuestionOptions(Nullable<int> questionId, Nullable<int> categoryId)
        {
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("questionId", questionId) :
                new ObjectParameter("questionId", typeof(int));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSurveyQuestionOptions_Result>("GetSurveyQuestionOptions", questionIdParameter, categoryIdParameter);
        }
    
        public virtual ObjectResult<GetSurveyQuestions_Result> GetSurveyQuestions(Nullable<int> surveyId)
        {
            var surveyIdParameter = surveyId.HasValue ?
                new ObjectParameter("surveyId", surveyId) :
                new ObjectParameter("surveyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSurveyQuestions_Result>("GetSurveyQuestions", surveyIdParameter);
        }
    
        public virtual ObjectResult<GetSurveyQuestionsForNotificationService_Result> GetSurveyQuestionsForNotificationService()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSurveyQuestionsForNotificationService_Result>("GetSurveyQuestionsForNotificationService");
        }
    
        public virtual ObjectResult<GetSurveyQuestionTypes_Result> GetSurveyQuestionTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSurveyQuestionTypes_Result>("GetSurveyQuestionTypes");
        }
    
        public virtual ObjectResult<GetSurveyReport_Result> GetSurveyReport(Nullable<int> surveyId)
        {
            var surveyIdParameter = surveyId.HasValue ?
                new ObjectParameter("surveyId", surveyId) :
                new ObjectParameter("surveyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSurveyReport_Result>("GetSurveyReport", surveyIdParameter);
        }
    
        public virtual ObjectResult<GetSurveyResponseReport_Result> GetSurveyResponseReport(string userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSurveyResponseReport_Result>("GetSurveyResponseReport", userIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetSurveys_Result> GetSurveys()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSurveys_Result>("GetSurveys");
        }
    
        public virtual ObjectResult<GetSurveySession_Result> GetSurveySession(Nullable<int> sessionId)
        {
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("sessionId", sessionId) :
                new ObjectParameter("sessionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSurveySession_Result>("GetSurveySession", sessionIdParameter);
        }
    
        public virtual ObjectResult<GetUser_Result> GetUser(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUser_Result>("GetUser", userIdParameter);
        }
    
        public virtual ObjectResult<GetUserActivationStatus_Result> GetUserActivationStatus(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserActivationStatus_Result>("GetUserActivationStatus", userIdParameter);
        }
    
        public virtual ObjectResult<GetUserMeasurementAvg_Result> GetUserMeasurementAvg()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserMeasurementAvg_Result>("GetUserMeasurementAvg");
        }
    
        public virtual ObjectResult<GetUserMedication_Result> GetUserMedication(Nullable<int> userMedicationId)
        {
            var userMedicationIdParameter = userMedicationId.HasValue ?
                new ObjectParameter("userMedicationId", userMedicationId) :
                new ObjectParameter("userMedicationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserMedication_Result>("GetUserMedication", userMedicationIdParameter);
        }
    
        public virtual ObjectResult<GetUserMedicationRefills_Result> GetUserMedicationRefills(Nullable<int> userMedicationId)
        {
            var userMedicationIdParameter = userMedicationId.HasValue ?
                new ObjectParameter("userMedicationId", userMedicationId) :
                new ObjectParameter("userMedicationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserMedicationRefills_Result>("GetUserMedicationRefills", userMedicationIdParameter);
        }
    
        public virtual ObjectResult<GetUserMedications_Result> GetUserMedications(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserMedications_Result>("GetUserMedications", userIdParameter);
        }
    
        public virtual ObjectResult<GetUserMedicationsAsNeeded_Result> GetUserMedicationsAsNeeded(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserMedicationsAsNeeded_Result>("GetUserMedicationsAsNeeded", userIdParameter);
        }
    
        public virtual ObjectResult<GetUserMedicationsNotTaken_Result> GetUserMedicationsNotTaken(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserMedicationsNotTaken_Result>("GetUserMedicationsNotTaken", userIdParameter);
        }
    
        public virtual ObjectResult<GetUsers_Result> GetUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUsers_Result>("GetUsers");
        }
    
        public virtual ObjectResult<GetUserWithSurvey_Result> GetUserWithSurvey(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserWithSurvey_Result>("GetUserWithSurvey", userIdParameter);
        }
    
        public virtual int GetvailableInventory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetvailableInventory");
        }
    
        public virtual ObjectResult<GetVerificationCodes_Result> GetVerificationCodes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVerificationCodes_Result>("GetVerificationCodes");
        }
    
        public virtual ObjectResult<GetWeightAverages_Result> GetWeightAverages(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWeightAverages_Result>("GetWeightAverages", dateParameter);
        }
    
        public virtual ObjectResult<GetWeightMeasurements_Result> GetWeightMeasurements(string userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWeightMeasurements_Result>("GetWeightMeasurements", userIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetWeightMeasurementsChart_Result> GetWeightMeasurementsChart(string userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWeightMeasurementsChart_Result>("GetWeightMeasurementsChart", userIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int RetireEquipment(Nullable<int> inventoryID, string netID)
        {
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("inventoryID", inventoryID) :
                new ObjectParameter("inventoryID", typeof(int));
    
            var netIDParameter = netID != null ?
                new ObjectParameter("netID", netID) :
                new ObjectParameter("netID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RetireEquipment", inventoryIDParameter, netIDParameter);
        }
    
        public virtual int ReturnEquipmentAssignment(Nullable<int> userEquipmentID, string netID, string comments, Nullable<int> returnReasonID)
        {
            var userEquipmentIDParameter = userEquipmentID.HasValue ?
                new ObjectParameter("userEquipmentID", userEquipmentID) :
                new ObjectParameter("userEquipmentID", typeof(int));
    
            var netIDParameter = netID != null ?
                new ObjectParameter("netID", netID) :
                new ObjectParameter("netID", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("comments", comments) :
                new ObjectParameter("comments", typeof(string));
    
            var returnReasonIDParameter = returnReasonID.HasValue ?
                new ObjectParameter("returnReasonID", returnReasonID) :
                new ObjectParameter("returnReasonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReturnEquipmentAssignment", userEquipmentIDParameter, netIDParameter, commentsParameter, returnReasonIDParameter);
        }
    
        public virtual int SetMedicationSchedulesInactive(Nullable<bool> inactive)
        {
            var inactiveParameter = inactive.HasValue ?
                new ObjectParameter("inactive", inactive) :
                new ObjectParameter("inactive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetMedicationSchedulesInactive", inactiveParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UpdateActiveUser(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateActiveUser", userIdParameter);
        }
    
        public virtual int UpdateDeactiveUser(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDeactiveUser", userIdParameter);
        }
    
        public virtual int UpdateEquipmentItem(Nullable<int> inventoryID, Nullable<int> equipTypeID, string manufacturer, string serialNo, string modelNo, string phoneNo, string macAddr, string bluetoothModelNo, Nullable<int> purchaserID, Nullable<int> cuffSize, Nullable<bool> active, string updatedBy)
        {
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("inventoryID", inventoryID) :
                new ObjectParameter("inventoryID", typeof(int));
    
            var equipTypeIDParameter = equipTypeID.HasValue ?
                new ObjectParameter("equipTypeID", equipTypeID) :
                new ObjectParameter("equipTypeID", typeof(int));
    
            var manufacturerParameter = manufacturer != null ?
                new ObjectParameter("manufacturer", manufacturer) :
                new ObjectParameter("manufacturer", typeof(string));
    
            var serialNoParameter = serialNo != null ?
                new ObjectParameter("serialNo", serialNo) :
                new ObjectParameter("serialNo", typeof(string));
    
            var modelNoParameter = modelNo != null ?
                new ObjectParameter("modelNo", modelNo) :
                new ObjectParameter("modelNo", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("phoneNo", phoneNo) :
                new ObjectParameter("phoneNo", typeof(string));
    
            var macAddrParameter = macAddr != null ?
                new ObjectParameter("macAddr", macAddr) :
                new ObjectParameter("macAddr", typeof(string));
    
            var bluetoothModelNoParameter = bluetoothModelNo != null ?
                new ObjectParameter("bluetoothModelNo", bluetoothModelNo) :
                new ObjectParameter("bluetoothModelNo", typeof(string));
    
            var purchaserIDParameter = purchaserID.HasValue ?
                new ObjectParameter("purchaserID", purchaserID) :
                new ObjectParameter("purchaserID", typeof(int));
    
            var cuffSizeParameter = cuffSize.HasValue ?
                new ObjectParameter("cuffSize", cuffSize) :
                new ObjectParameter("cuffSize", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("active", active) :
                new ObjectParameter("active", typeof(bool));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("updatedBy", updatedBy) :
                new ObjectParameter("updatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEquipmentItem", inventoryIDParameter, equipTypeIDParameter, manufacturerParameter, serialNoParameter, modelNoParameter, phoneNoParameter, macAddrParameter, bluetoothModelNoParameter, purchaserIDParameter, cuffSizeParameter, activeParameter, updatedByParameter);
        }
    }
}
